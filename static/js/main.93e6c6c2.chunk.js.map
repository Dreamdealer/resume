{"version":3,"sources":["Config/tetrisConfig.ts","Components/Cell.tsx","Components/Instructions.tsx","Components/Stage.tsx","gameHelpers.ts","Config/tetrominos.ts","Hooks/usePlayer.ts","Hooks/useStage.ts","Hooks/useInterval.ts","Components/Display.tsx","Components/Button.tsx","Components/GameOver.tsx","Components/Styles.ts","Components/OnScreenControls.tsx","Components/FancyRadios.tsx","Components/Label.tsx","Components/Settings.tsx","Components/Box.tsx","Assets/slider.svg","Themes/LightTheme.ts","Themes/DarkTheme.ts","Components/SingleTetromino.tsx","Components/Tetris.tsx","Hooks/useGameStatus.ts","index.tsx"],"names":["tetrisConfig","width","height","size","spacing","StyledCube","styled","div","transparent","StyledCubeFace","tetrominoType","theme","tetrominos","color","face","handleFaceTransform","Cell","props","StyledInstructions","modal","Instructions","StyledStage","stage","background","showInstructions","lines","main","borderWidth","borderColor","paused","StyledPause","StyledRow","StyledColumnGuide","left","columnWidth","guide","Stage","activeColumns","map","row","rowIndex","index","type","createStage","Array","from","fill","checkCollision","player","moveX","x","moveY","y","tetromino","length","pos","PauseTetromino","TETROMINOS","0","shape","preview","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","playerStartingState","collided","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","setActiveColumns","useEffect","updateStage","prevStage","newStage","cell","offsetArray","indexes","filter","min","max","cells","flat","forEach","value","newY","newX","reduce","accumulator","findIndex","prev","unshift","push","sweepRows","prevState","useInterval","callback","delay","savedCallback","useRef","current","interval","setInterval","clearInterval","Display","buttonsAndDisplays","fontSize","Button","button","tSS","GameOver","StyledSettingsContainer","StyledSettingsOverlay","overlay","StyledDisplaysContainer","StyledDisplays","StyledControlsContainer","StyledControl","AppContainer","StyledTetrisContainer","tilt","gameOver","StyledSlider","input","OnScreenControls","onClick","e","onPushLeft","preventDefault","onPushRotate","onPushDown","onPushRight","StyledFancyRadiosContainer","StyledLabel","label","checked","FancyRadios","options","option","selected","name","onChange","target","Label","mt","Settings","localSettings","onLocalSettingsChange","parseInt","style","marginTop","display","justifyContent","onCloseSettings","Box","direction","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","className","d","SvgSlider","_ref","svgRef","title","titleId","xmlns","xmlnsXlink","viewBox","enableBackground","xmlSpace","ref","id","ForwardRef","lightTheme","darkTheme","SingleTetromino","cellIndex","Tetris","setLocalSettings","dropTime","setDropTime","showSettings","setShowSettings","setGameOver","gamePaused","setGamePaused","gameStarted","setGameStarted","setPlayer","nextTetromino","setNextTetromino","rotate","matrix","rotatedTetromino","_","col","reverse","useCallback","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPosition","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","gameRef","movePlayer","dir","playerMovement","startGame","moveTetrominoDown","canMoveTo","tryToMoveTo","action","localStorageSettings","localStorage","getItem","settingsObject","setItem","focus","role","tabIndex","onKeyUp","keyCode","onKeyDown","event","console","log","move","marginLeft","pauseTetrominoShape","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93e6c6c2.chunk.js","sourcesContent":["export const tetrisConfig = {\n    stage: {\n        width: 10,\n        height: 20,\n    },\n    cell: {\n        size: 32,\n        spacing: 0,\n    },\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { tetrisConfig } from '../Config/tetrisConfig';\nimport { TetrominoKeyType } from '../Config/tetrominos';\n\ntype PropsType = {\n    tetrominoType: TetrominoKeyType;\n};\n\nconst handleFaceTransform = (face: string) => {\n    switch (face) {\n        case 'right':\n            return 'rotateY(90deg)';\n        case 'back':\n            return 'rotateY(180deg)';\n        case 'left':\n            return 'rotateY(-90deg)';\n        case 'top':\n            return 'rotateX(90deg)';\n        case 'bottom':\n            return 'rotateX(-90deg)';\n        default:\n        case 'front':\n            return 'rotateY(0deg)';\n    }\n};\n\nexport const StyledCube = styled.div<{ transparent?: boolean }>`\n    width: ${tetrisConfig.cell.size}px;\n    height: ${tetrisConfig.cell.size}px;\n    position: relative;\n    transform-style: preserve-3d;\n    transform: translateX(${tetrisConfig.cell.spacing / 2}px) translateY(${tetrisConfig.cell.spacing / 2}px)\n        translateZ(${tetrisConfig.cell.size}px);\n    transition: transform 1s;\n\n    ${({ transparent }) =>\n        !transparent &&\n        `\n        &::after {\n            content: '';\n            position: absolute;\n            width: ${tetrisConfig.cell.size}px;\n            height: ${tetrisConfig.cell.size}px;\n            background: rgba(0,0,0,.1);\n            box-shadow: 0 0 10px rgba(0,0,0,.1);\n            transform: translateZ(-${tetrisConfig.cell.size}px);\n        }\n    `}\n`;\n\nexport const StyledCubeFace = styled.div<{ face: string; tetrominoType: string }>`\n    position: absolute;\n    width: ${tetrisConfig.cell.size - tetrisConfig.cell.spacing * 2}px;\n    height: ${tetrisConfig.cell.size - tetrisConfig.cell.spacing * 2}px;\n    background: ${({ tetrominoType, theme }) => theme.tetrominos[tetrominoType].color};\n    line-height: ${tetrisConfig.cell.size}px;\n    font-size: 40px;\n    font-weight: bold;\n    color: white;\n    text-align: center;\n    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1) inset;\n    transform: ${({ face }) =>\n        `${handleFaceTransform(face)} translateZ(${tetrisConfig.cell.size / 2 - tetrisConfig.cell.spacing}px)`};\n`;\n\nconst Cell: FC<PropsType> = props => {\n    if (props.tetrominoType === 0) {\n        return <StyledCube transparent />;\n    }\n\n    return (\n        <StyledCube>\n            <StyledCubeFace face=\"front\" tetrominoType={props.tetrominoType} />\n            <StyledCubeFace face=\"back\" tetrominoType={props.tetrominoType} />\n            <StyledCubeFace face=\"right\" tetrominoType={props.tetrominoType} />\n            <StyledCubeFace face=\"left\" tetrominoType={props.tetrominoType} />\n            <StyledCubeFace face=\"top\" tetrominoType={props.tetrominoType} />\n            <StyledCubeFace face=\"bottom\" tetrominoType={props.tetrominoType} />\n        </StyledCube>\n    );\n};\n\nexport default Cell;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledInstructions = styled.div`\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: ${({ theme }) => theme.modal.color};\n    padding: 20px;\n`;\n\nconst Instructions = () => (\n    <StyledInstructions>\n        Keybindings:\n        <br />\n        <br />\n        Up = Rotate tetromino\n        <br />\n        <br />\n        Left = Move tetromino left one cell\n        <br />\n        <br />\n        Right = Move tetromino right one cell\n        <br />\n        <br />\n        Down = Move tetromino down one cell\n        <br />\n        <br />\n        PageDown or End = Move tetromino all the way down\n    </StyledInstructions>\n);\n\nexport default Instructions;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { tetrisConfig } from '../Config/tetrisConfig';\nimport { StageType } from '../gameHelpers';\nimport Cell, { StyledCube } from './Cell';\nimport Instructions from './Instructions';\n\nexport const StyledStage = styled.div<{ showInstructions: boolean; paused: boolean }>`\n    width: ${() => `${tetrisConfig.stage.width * tetrisConfig.cell.size}px`};\n    height: ${() => `${tetrisConfig.stage.height * tetrisConfig.cell.size}px`};\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: flex-end;\n    align-items: flex-end;\n    background: ${({ theme }) => theme.stage.background};\n\n    ${({ showInstructions, theme }) =>\n        !showInstructions &&\n        `\n        background-image: linear-gradient(${theme.stage.lines} 1px, transparent 1px),\n            linear-gradient(90deg, ${theme.stage.lines} 1px, transparent 1px);\n        background-size: ${tetrisConfig.cell.size}px ${tetrisConfig.cell.size}px,\n            ${tetrisConfig.cell.size}px ${tetrisConfig.cell.size}px;\n        background-position: -1px -1px, -1px -1px;\n    `}\n\n    box-shadow: 0 0 0 1px ${({ theme }) => theme.stage.lines} inset;\n    border: ${({ theme }) => theme.main.borderWidth} solid ${({ theme }) => theme.main.borderColor};\n    border-radius: 8px;\n    position: relative;\n\n    ${StyledCube} {\n        box-shadow: none;\n        filter: ${({ paused }) => (paused ? 'blur(15px)' : 'none')};\n    }\n`;\n\nconst StyledPause = styled.div`\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: ${({ theme }) => theme.modal.color};\n    padding: 20px;\n    font-size: 40px;\n`;\n\nconst StyledRow = styled.div`\n    display: flex;\n    height: ${tetrisConfig.cell.size}px;\n    width: 100%;\n`;\n\nconst StyledColumnGuide = styled.div<{ left: number; size: number; columnWidth: number }>`\n    position: absolute;\n    left: ${({ left, columnWidth }) => `${left * columnWidth}px`};\n    width: ${({ size, columnWidth }) => `${size * columnWidth}px`};\n    top: 0;\n    bottom: 0;\n    background: ${({ theme }) => theme.stage.guide};\n`;\n\ntype PropsType = {\n    stage: StageType;\n    paused: boolean;\n    showInstructions: boolean;\n    activeColumns: {\n        left: number;\n        size: number;\n    };\n};\n\nconst Stage: FC<PropsType> = props => {\n    return (\n        <StyledStage showInstructions={props.showInstructions} paused={props.paused}>\n            {props.showInstructions && <Instructions />}\n            {props.paused && <StyledPause>Paused</StyledPause>}\n            {props.activeColumns.size > 0 && (\n                <StyledColumnGuide {...props.activeColumns} columnWidth={tetrisConfig.cell.size} />\n            )}\n            {props.stage.map((row: Array<Array<any>>, rowIndex: number) => (\n                <StyledRow key={rowIndex}>\n                    {row.map(([type], index: number) => {\n                        return <Cell key={rowIndex + index} tetrominoType={type} />;\n                    })}\n                </StyledRow>\n            ))}\n        </StyledStage>\n    );\n};\n\nexport default Stage;\n","import { PlayerStateType } from './Hooks/usePlayer';\nimport { tetrisConfig } from './Config/tetrisConfig';\nimport { TetrominoShapeType } from './Config/tetrominos';\n\nexport type StageCellType = [TetrominoShapeType];\n\nexport type StageType = Array<Array<any>>;\n\nexport const createStage = (): StageType => {\n    const emptyStage = Array.from(Array(tetrisConfig.stage.height), () =>\n        new Array(tetrisConfig.stage.width).fill([0, 'clear']),\n    );\n\n    return emptyStage;\n};\n\nexport const checkCollision = (\n    player: PlayerStateType,\n    stage: StageType,\n    { x: moveX, y: moveY }: { x: number; y: number },\n) => {\n    for (let y = 0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\n            // 1. Check that we're on an actual Tetromino cell\n            if (player.tetromino[y][x] !== 0) {\n                if (\n                    // 2. Check that our move is inside the game areas height (y)\n                    // We shouldn't go through the bottom of the play area\n                    !stage[y + player.pos.y + moveY] ||\n                    // 3. Check that our move is inside the game areas width (x)\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                    // 4. Check that the cell wer'e moving to isn't set to clear\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n                ) {\n                    return true;\n                }\n            }\n        }\n    }\n};\n","export type TetrominoShapeType = Array<Array<string | number>>;\n\nexport type TetrominoKeyType = 0 | 'I' | 'J' | 'L' | 'O' | 'S' | 'T' | 'Z';\n\nexport type TetrominoType = {\n    shape: TetrominoShapeType;\n    preview: TetrominoShapeType;\n};\n\nexport type TetrominosType = {\n    [key in TetrominoKeyType]: TetrominoType;\n};\n\nexport const PauseTetromino: TetrominoShapeType = [\n    [0, '?', 0],\n    ['?', 0, '?'],\n    [0, 0, '?'],\n    [0, '?', 0],\n    [0, 0, 0],\n    [0, '?', 0],\n];\n\nexport const TETROMINOS: TetrominosType = {\n    0: { shape: [[0]], preview: [[0]] },\n    I: {\n        shape: [\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n        ],\n        preview: [['I'], ['I'], ['I'], ['I']],\n    },\n    J: {\n        shape: [\n            [0, 'J', 0],\n            [0, 'J', 0],\n            ['J', 'J', 0],\n        ],\n        preview: [\n            [0, 'J'],\n            [0, 'J'],\n            ['J', 'J'],\n        ],\n    },\n    L: {\n        shape: [\n            [0, 'L', 0],\n            [0, 'L', 0],\n            [0, 'L', 'L'],\n        ],\n        preview: [\n            ['L', 0],\n            ['L', 0],\n            ['L', 'L'],\n        ],\n    },\n    O: {\n        shape: [\n            ['O', 'O'],\n            ['O', 'O'],\n        ],\n        preview: [\n            ['O', 'O'],\n            ['O', 'O'],\n        ],\n    },\n    S: {\n        shape: [\n            [0, 'S', 'S'],\n            ['S', 'S', 0],\n            [0, 0, 0],\n        ],\n        preview: [\n            [0, 'S', 'S'],\n            ['S', 'S', 0],\n        ],\n    },\n    T: {\n        shape: [\n            [0, 0, 0],\n            ['T', 'T', 'T'],\n            [0, 'T', 0],\n        ],\n        preview: [\n            ['T', 'T', 'T'],\n            [0, 'T', 0],\n        ],\n    },\n    Z: {\n        shape: [\n            ['Z', 'Z', 0],\n            [0, 'Z', 'Z'],\n            [0, 0, 0],\n        ],\n        preview: [\n            ['Z', 'Z', 0],\n            [0, 'Z', 'Z'],\n        ],\n    },\n};\n\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randTetromino as keyof TetrominosType];\n};\n","import { useCallback, useState } from 'react';\nimport { checkCollision, StageType } from '../gameHelpers';\nimport { tetrisConfig } from '../Config/tetrisConfig';\nimport { randomTetromino, TETROMINOS, TetrominoShapeType } from '../Config/tetrominos';\n\nexport type PositionType = {\n    x: number;\n    y: number;\n};\n\nexport type PlayerStateType = {\n    pos: PositionType;\n    tetromino: TetrominoShapeType;\n    collided: boolean;\n};\n\nexport type PlayerPositionType = PositionType & { collided: boolean };\n\nconst playerStartingState: PlayerStateType = {\n    pos: {\n        x: 0,\n        y: 0,\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n};\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState(playerStartingState);\n    const [nextTetromino, setNextTetromino] = useState(randomTetromino());\n\n    const rotate = (matrix: TetrominoShapeType, direction: number) => {\n        const rotatedTetromino = matrix.map((_, index) => matrix.map(col => col[index]));\n\n        if (direction > 0) return rotatedTetromino.map(row => row.reverse());\n\n        return rotatedTetromino.reverse();\n    };\n\n    const playerRotate = (stage: StageType, direction: number) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if (offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -direction);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n        setPlayer(clonedPlayer);\n    };\n\n    const updatePlayerPosition = ({ x, y, collided }: PlayerPositionType) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: {\n                x: (prev.pos.x += x),\n                y: (prev.pos.y += y),\n            },\n            collided,\n        }));\n    };\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: {\n                x: tetrisConfig.stage.width / 2 - 2,\n                y: 0,\n            },\n            tetromino: nextTetromino.shape,\n            collided: false,\n        });\n\n        setNextTetromino(randomTetromino());\n    }, [nextTetromino]);\n\n    return [player, updatePlayerPosition, resetPlayer, playerRotate, nextTetromino] as const;\n};\n","import { useState, useEffect } from 'react';\nimport { createStage, StageType } from '../gameHelpers';\nimport { PlayerStateType } from './usePlayer';\n\nexport const useStage = (player: PlayerStateType, resetPlayer: any) => {\n    const [ stage, setStage ] = useState(createStage());\n    const [ rowsCleared, setRowsCleared ] = useState(0);\n    const [ activeColumns, setActiveColumns ] = useState({left: 0, size: 0});\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = (newStage: StageType) => (\n            newStage.reduce((accumulator, row) => {\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\n                    setRowsCleared(prev => prev + 1);\n                    accumulator.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n\n                    return accumulator;\n                }\n\n                accumulator.push(row);\n\n                return accumulator;\n            }, [])\n        )\n\n        const updateStage = (prevStage: StageType): StageType => {\n            const newStage = prevStage.map(row => {\n                return row.map(cell => { return cell[1] === 'clear' ? [0, 'clear'] : cell })\n            });\n\n            const offsetArray = player.tetromino.map((row) => {\n                const indexes = row.map((cell, index) => {\n                    return cell !== 0 ? index + 1 : 0;\n                }).filter(index => index > 0);\n\n                if (indexes.length > 0) {\n                    return [Math.min(...indexes), Math.max(...indexes)];\n                }\n                \n                return [];\n            }).filter(cells => cells.length > 0).flat();\n\n            setActiveColumns({\n                left: player.pos.x + (Math.min(...offsetArray) - 1),\n                size: Math.max(...offsetArray) - Math.min(...offsetArray) + 1,\n            });\n\n            // draw the current tetromino\n            player.tetromino.forEach((row, y: number) => {\n                row.forEach((value: number | string, x: number) => {\n                    if (value !== 0) {\n                        const newY = y + player.pos.y;\n                        const newX = x + player.pos.x;\n\n                        //console.log(`newX: ${newX}, width: ${player.tetromino[0].length}`);\n\n                        newStage[newY][newX] = [\n                            value,\n                            player.collided ? 'merged' : 'clear',\n                        ];\n                    }\n                });\n            });\n\n            // check collisions\n            if (player.collided) {\n                resetPlayer();\n\n                return sweepRows(newStage);\n            }\n\n            return newStage;\n        }\n\n        setStage(prevState => updateStage(prevState));\n\n    }, [player, resetPlayer]);\n\n    return [ stage, setStage, rowsCleared, activeColumns ] as const;\n};","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback: Function, delay?: number | null) => {\n    const savedCallback = useRef<Function>(() => {});\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    });\n\n    useEffect(() => {\n        if (delay !== null) {\n        const interval = setInterval(() => savedCallback.current(), delay || 0);\n            return () => clearInterval(interval);\n        }\n\n        return undefined;\n    }, [delay]);\n};\n\nexport default useInterval;\n","import styled from 'styled-components';\n\nconst Display = styled.div`\n    background: ${({ theme }) => theme.buttonsAndDisplays.background};\n    border: ${({ theme }) => theme.main.borderWidth} solid ${({ theme }) => theme.main.borderColor};\n    color: ${({ theme }) => theme.buttonsAndDisplays.color};\n    font-size: ${({ theme }) => theme.main.fontSize};\n    font-family: 'Press Start 2P', cursive;\n    border-radius: 8px;\n    line-height: 50px;\n    margin-top: 20px;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-flow: column;\n`;\n\nexport default Display;\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n    background: ${({ theme }) => theme.buttonsAndDisplays.background};\n    border: ${({ theme }) => theme.main.borderWidth} solid ${({ theme }) => theme.main.borderColor};\n    color: ${({ theme }) => theme.buttonsAndDisplays.color};\n    font-size: ${({ theme }) => theme.main.fontSize};\n    display: flex;\n    flex-grow: 1;\n    justify-content: center;\n    align-items: center;\n    outline: none;\n    padding: 0 20px;\n    border-radius: 8px;\n    line-height: 50px;\n    font-family: inherit;\n\n    .custom-fill {\n        fill: ${({ theme }) => theme.buttonsAndDisplays.color};\n    }\n\n    &:hover {\n        cursor: pointer;\n        box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);\n    }\n`;\n\nexport default Button;\n","import styled from 'styled-components';\nimport Button from './Button';\n\n// tSS = Text Shadow Size\nconst tSS = '1vw';\n\nconst GameOver = styled.div`\n    position: fixed;\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    z-index: 99;\n    color: #000;\n    font-size: 60px;\n    font-size: 8vw;\n    display: flex;\n    flex-flow: column wrap;\n    font-family: 'Press Start 2P', cursive;\n    text-shadow: ${tSS} ${tSS} 0 #fff, ${tSS} 0 0 #fff, 0 ${tSS} 0 #fff, -${tSS} ${tSS} 0 #fff, 00px 0 #fff,\n        0-${tSS} 0 #fff, ${tSS} -${tSS} 0 #fff, -${tSS} -${tSS} 0 #fff, 0 0 30px #000;\n\n    ${Button} {\n        flex-grow: 0;\n    }\n`;\n\nexport default GameOver;\n","import styled from 'styled-components';\nimport { tetrisConfig } from '../Config/tetrisConfig';\nimport Display from './Display';\n\nexport const StyledSettingsContainer = styled.div`\n    background: ${({ theme }) => theme.modal.background};\n    color: ${({ theme }) => theme.modal.color};\n    padding: 30px;\n    border-radius: 8px;\n`;\n\nexport const StyledSettingsOverlay = styled.div`\n    color: ${({ theme }) => theme.main.color};\n    position: fixed;\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    z-index: 99;\n    display: flex;\n    flex-flow: column wrap;\n    font-family: 'Press Start 2P', cursive;\n    background: ${({ theme }) => theme.modal.overlay}; ;\n`;\n\nexport const StyledDisplaysContainer = styled.div`\n    margin-right: 20px;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: flex-start;\n    align-items: stretch;\n`;\n\nexport const StyledDisplays = styled.div`\n    display: flex;\n    flex-flow: column wrap;\n`;\n\nexport const StyledControlsContainer = styled.div`\n    display: none;\n\n    @media (max-width: ${tetrisConfig.cell.size * tetrisConfig.stage.width + 300}px) {\n        display: flex;\n    }\n\n    position: fixed;\n    top: ${() => `${tetrisConfig.stage.height * tetrisConfig.cell.size - 50}px`};\n    height: 50px;\n    width: 100%;\n    z-index: 98;\n    justify-content: center;\n    align-items: stretch;\n`;\n\nexport const StyledControl = styled.button`\n    display: flex;\n    outline: none;\n    border: none;\n    padding: 0;\n    flex-grow: 1;\n    justify-content: center;\n    background: rgba(255, 255, 255, 0.5);\n    padding: 20px;\n`;\n\nexport const AppContainer = styled.div`\n    background: ${({ theme }) => theme.main.background};\n    width: 100%;\n    display: flex;\n    flex-grow: 1;\n    justify-content: center;\n    align-items: center;\n    flex-flow: row nowrap;\n`;\n\nexport const StyledTetrisContainer = styled.div<{ gameOver: boolean; tilt: number }>`\n    outline: none;\n    display: flex;\n    flex-grow: 1;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: flex-start;\n    transform-style: preserve-3d;\n    transform: rotateX(${({ tilt }) => `${tilt}deg`}) rotateY(0deg) translateZ(0px);\n    filter: ${({ gameOver }) => (gameOver ? 'blur(5px)' : 'none')};\n    font-family: 'Press Start 2P', cursive;\n\n    // desktop size\n    @media (min-width: ${tetrisConfig.cell.size * tetrisConfig.stage.width + 300}px) {\n        flex-flow: row nowrap;\n\n        ${StyledDisplaysContainer} {\n            width: 300px;\n        }\n    }\n\n    // mobile size\n    @media (max-width: ${tetrisConfig.cell.size * tetrisConfig.stage.width + 300}px) {\n        flex-flow: column nowrap;\n        justify-content: center;\n        align-items: center;\n        padding-top: 10px;\n\n        ${Display} {\n            font-size: 14px;\n            margin-top: 0;\n            padding: 8px;\n            line-height: 14px;\n            display: block;\n            border: 0;\n        }\n\n        ${StyledDisplaysContainer} {\n            margin: 0;\n            padding: 20px;\n            order: 2;\n\n            ${StyledDisplays} {\n                border: ${({ theme }) => theme.main.borderWidth} solid ${({ theme }) => theme.main.borderColor};\n                border-radius: 8px;\n                flex-flow: row wrap;\n                margin: 10px 0;\n                background: #fff;\n            }\n        }\n    }\n`;\n\nexport const StyledSlider = styled.input`\n    width: 100%;\n`;\n","import React, { FC } from 'react';\nimport { StyledControl, StyledControlsContainer } from './Styles';\n\ntype PropsType = {\n    onPushLeft(): void;\n    onPushRight(): void;\n    onPushRotate(): void;\n    onPushDown(): void;\n};\n\nconst OnScreenControls: FC<PropsType> = props => (\n    <StyledControlsContainer>\n        <StyledControl\n            onClick={e => {\n                props.onPushLeft();\n                e.preventDefault();\n            }}\n        >\n            Left\n        </StyledControl>\n        <StyledControl\n            onClick={e => {\n                props.onPushRotate();\n                e.preventDefault();\n            }}\n        >\n            Rotate\n        </StyledControl>\n        <StyledControl\n            onClick={e => {\n                props.onPushDown();\n                e.preventDefault();\n            }}\n        >\n            Down\n        </StyledControl>\n        <StyledControl\n            onClick={e => {\n                props.onPushRight();\n                e.preventDefault();\n            }}\n        >\n            Right\n        </StyledControl>\n    </StyledControlsContainer>\n);\n\nexport default OnScreenControls;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nconst StyledFancyRadiosContainer = styled.div`\n    border: ${({ theme }) => theme.main.borderWidth} solid ${({ theme }) => theme.main.borderColor};\n    border-radius: 8px;\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: stretch;\n\n    input {\n        display: none;\n    }\n`;\n\nconst StyledLabel = styled.label<{ checked: boolean }>`\n    display: flex;\n    flex-grow: 1;\n    justify-content: center;\n    padding: 20px;\n    color: ${({ checked, theme }) => (checked ? '#F00' : theme.main.color)};\n`;\n\ntype PropsType = {\n    name: string;\n    options: Array<{\n        value: string;\n        label: string;\n    }>;\n    selected: string;\n    onChange(selectedValue: string): void;\n};\n\nconst FancyRadios: FC<PropsType> = props => (\n    <StyledFancyRadiosContainer>\n        {props.options.map(option => (\n            <StyledLabel checked={props.selected === option.value}>\n                <input\n                    type=\"radio\"\n                    name={props.name}\n                    value={option.value}\n                    checked={props.selected === option.value}\n                    onChange={({ target }) => {\n                        props.onChange(target.value);\n                    }}\n                />\n                {option.label}\n            </StyledLabel>\n        ))}\n    </StyledFancyRadiosContainer>\n);\n\nexport default FancyRadios;\n","import styled from 'styled-components';\n\nconst Label = styled.label<{ mt?: boolean }>`\n    display: flex;\n    outline: none;\n    line-height: 45px;\n    font-size: 20px;\n    margin-bottom: 12px;\n    margin-top: ${({ mt }) => (mt ? '30px' : '0')};\n    font-family: inherit;\n`;\n\nexport default Label;\n","import React, { FC } from 'react';\nimport Button from './Button';\nimport FancyRadios from './FancyRadios';\nimport Label from './Label';\nimport { StyledSettingsContainer, StyledSettingsOverlay, StyledSlider } from './Styles';\nimport { LocalSettingsType } from './Tetris';\n\ntype PropsType = {\n    localSettings: LocalSettingsType;\n    onLocalSettingsChange(localSettings: LocalSettingsType): void;\n    onCloseSettings(): void;\n};\n\nconst Settings: FC<PropsType> = props => (\n    <StyledSettingsOverlay>\n        <StyledSettingsContainer>\n            <Label>Tilt:</Label>\n            <StyledSlider\n                type=\"range\"\n                name=\"volume\"\n                value={props.localSettings.tilt}\n                min=\"0\"\n                max=\"65\"\n                onChange={({ target }) => {\n                    props.onLocalSettingsChange({\n                        ...props.localSettings,\n                        tilt: parseInt(target.value),\n                    });\n                }}\n            />\n            <Label mt>Theme:</Label>\n            <FancyRadios\n                name=\"theme\"\n                options={[\n                    { value: 'light', label: 'Light' },\n                    { value: 'dark', label: 'Dark' },\n                ]}\n                selected={props.localSettings.theme}\n                onChange={selected => {\n                    props.onLocalSettingsChange({\n                        ...props.localSettings,\n                        theme: selected as LocalSettingsType['theme'],\n                    });\n                }}\n            />\n            <div style={{ marginTop: '20px', display: 'flex', justifyContent: 'center' }}>\n                <Button\n                    onClick={() => {\n                        props.onCloseSettings();\n                    }}\n                >\n                    Close\n                </Button>\n            </div>\n        </StyledSettingsContainer>\n    </StyledSettingsOverlay>\n);\n\nexport default Settings;\n","import styled from 'styled-components';\n\nexport type BoxType = {\n    direction?: 'column' | 'row';\n};\n\nconst Box = styled.div<BoxType>`\n    display: flex;\n    flex-grow: 0;\n    flex-shrink: 0;\n    flex-direction: ${({ direction }) => (direction ? direction : 'row')};\n    justify-content: center;\n    align-items: stretch;\n`;\n\nexport default Box;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n  className: \"custom-fill\",\n  d: \"M57,11h-9.5C45.9,5.7,40.3,2.8,35,4.5c-3.1,1-5.6,3.4-6.5,6.5H7c-1.7,0-3,1.3-3,3s1.3,3,3,3h21.5c1.7,5.3,7.3,8.2,12.5,6.5   c3.1-1,5.6-3.4,6.5-6.5H57c1.7,0,3-1.3,3-3S58.7,11,57,11z M38,18c-2.2,0-4-1.8-4-4s1.8-4,4-4s4,1.8,4,4S40.2,18,38,18z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"custom-fill\",\n  d: \"M57,29H26.5c-1.7-5.3-7.3-8.2-12.5-6.5c-3.1,1-5.6,3.4-6.5,6.5H7c-1.7,0-3,1.3-3,3c0,1.7,1.3,3,3,3h0.5   c1.7,5.3,7.3,8.2,12.5,6.5c3.1-1,5.6-3.4,6.5-6.5H57c1.7,0,3-1.3,3-3C60,30.3,58.7,29,57,29z M17,36c-2.2,0-4-1.8-4-4s1.8-4,4-4   s4,1.8,4,4S19.2,36,17,36z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"custom-fill\",\n  d: \"M57,47h-1.5c-1.7-5.3-7.3-8.2-12.5-6.5c-3.1,1-5.6,3.4-6.5,6.5H7c-1.7,0-3,1.3-3,3s1.3,3,3,3h29.5   c1.7,5.3,7.3,8.2,12.5,6.5c3.1-1,5.6-3.4,6.5-6.5H57c1.7,0,3-1.3,3-3S58.7,47,57,47z M46,54c-2.2,0-4-1.8-4-4s1.8-4,4-4s4,1.8,4,4   S48.2,54,46,54z\"\n}));\n\nfunction SvgSlider(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 64 64\",\n    style: {\n      enableBackground: \"new 0 0 64 64\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSlider);\nexport default __webpack_public_path__ + \"static/media/slider.9e01c979.svg\";\nexport { ForwardRef as ReactComponent };","import { ThemeType } from './ThemeTypes';\n\nexport const lightTheme: ThemeType = {\n    tetrominos: {\n        0: { color: '#000' },\n        I: { color: '#9cdaff' },\n        J: { color: '#c568a5' },\n        L: { color: '#ffd265' },\n        O: { color: '#bcff7c' },\n        S: { color: '#cd94ff' },\n        T: { color: '#8aedeb' },\n        Z: { color: '#dea6ec' },\n        '?': { color: '#ece7a6' },\n    },\n    main: {\n        background: 'linear-gradient(to top, #ffefba, #ffffff)',\n        color: '#000',\n        borderColor: '#000',\n        borderWidth: '1px',\n        fontSize: '20px',\n    },\n    modal: {\n        overlay: 'rgba(0, 0, 0, 0.6)',\n        background: '#FFF',\n        color: '#000',\n    },\n    stage: {\n        background: '#FFF',\n        lines: '#BBB',\n        guide: 'rgba(0,0,0,0.05)',\n    },\n    buttonsAndDisplays: {\n        background: '#FFF',\n        color: '#000',\n    },\n};\n","import { ThemeType } from './ThemeTypes';\n\nexport const darkTheme: ThemeType = {\n    tetrominos: {\n        0: { color: '#000' },\n        I: { color: '#9cdaff' },\n        J: { color: '#c568a5' },\n        L: { color: '#ffd265' },\n        O: { color: '#bcff7c' },\n        S: { color: '#cd94ff' },\n        T: { color: '#8aedeb' },\n        Z: { color: '#dea6ec' },\n        '?': { color: '#ece7a6' },\n    },\n    main: {\n        background: 'linear-gradient(to bottom, #0f2027, #203a43, #2c5364)',\n        color: '#FFF',\n        borderColor: '#FFF',\n        borderWidth: '1px',\n        fontSize: '20px',\n    },\n    modal: {\n        overlay: 'rgba(255, 255, 255, 0.6)',\n        background: '#000',\n        color: '#FFF',\n    },\n    stage: {\n        background: '#000',\n        lines: '#777',\n        guide: 'rgba(255,255,255,0.2)',\n    },\n    buttonsAndDisplays: {\n        background: '#0f2027',\n        color: '#FFF',\n    },\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { tetrisConfig } from '../Config/tetrisConfig';\nimport { TetrominoShapeType, TetrominoKeyType } from '../Config/tetrominos';\nimport Box from './Box';\nimport Cell from './Cell';\n\nconst StyledRow = styled.div`\n    display: flex;\n    height: ${tetrisConfig.cell.size}px;\n    width: 100%;\n`;\n\ntype PropsType = {\n    shape: TetrominoShapeType;\n};\n\nconst SingleTetromino: FC<PropsType> = props => {\n    return (\n        <Box direction=\"column\">\n            {props.shape.map((row: Array<string | number>, rowIndex: number) => (\n                <StyledRow key={rowIndex}>\n                    {row.map((type: string | number, cellIndex) => {\n                        return <Cell key={cellIndex} tetrominoType={type as TetrominoKeyType} />;\n                    })}\n                </StyledRow>\n            ))}\n        </Box>\n    );\n};\n\nexport default SingleTetromino;\n","import React, { useEffect, useRef, useState } from 'react';\nimport Stage from './Stage';\nimport { usePlayer } from '../Hooks/usePlayer';\nimport { useStage } from '../Hooks/useStage';\nimport useInterval from '../Hooks/useInterval';\nimport { createStage, checkCollision } from '../gameHelpers';\nimport { useGameStatus } from '../Hooks/useGameStatus';\nimport Display from './Display';\nimport { tetrisConfig } from '../Config/tetrisConfig';\nimport Button from './Button';\nimport GameOver from './GameOver';\nimport { StyledTetrisContainer, StyledDisplaysContainer, StyledDisplays, AppContainer } from './Styles';\nimport OnScreenControls from './OnScreenControls';\nimport Settings from './Settings';\nimport Box from './Box';\nimport { ThemeProvider } from 'styled-components';\nimport { ReactComponent as Slider } from '../Assets/slider.svg';\nimport { lightTheme } from '../Themes/LightTheme';\nimport { darkTheme } from '../Themes/DarkTheme';\nimport SingleTetromino from './SingleTetromino';\nimport { PauseTetromino as pauseTetrominoShape } from '../Config/tetrominos';\n\ntype PlayerMovementType = 'LEFT' | 'RIGHT' | 'ROTATE' | 'DOWN' | 'FULLDOWN' | 'TOGGLE_PAUSE' | 'UNPAUSE';\n\nexport type LocalSettingsType = {\n    tilt: number;\n    theme: 'light' | 'dark';\n};\n\nconst Tetris = () => {\n    const [localSettings, setLocalSettings] = useState<LocalSettingsType>({\n        tilt: 0,\n        theme: 'light',\n    });\n    const [dropTime, setDropTime] = useState<null | number>(null);\n    const [showSettings, setShowSettings] = useState(false);\n    const [gameOver, setGameOver] = useState(false);\n    const [gamePaused, setGamePaused] = useState(false);\n    const [gameStarted, setGameStarted] = useState(false);\n    const [player, updatePlayerPosition, resetPlayer, playerRotate, nextTetromino] = usePlayer();\n    const [stage, setStage, rowsCleared, activeColumns] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n    const gameRef = useRef<HTMLDivElement>(null);\n\n    const movePlayer = (dir: number) => {\n        playerMovement('UNPAUSE');\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n            updatePlayerPosition({ x: dir, y: 0, collided: false });\n        }\n    };\n\n    const startGame = () => {\n        setStage(createStage());\n        setDropTime(1000);\n        resetPlayer();\n        setScore(0);\n        setLevel(0);\n        setRows(0);\n        setGameOver(false);\n        setGameStarted(true);\n    };\n\n    const moveTetrominoDown = (y: number) => {\n        // Increase level and speed when player has cleared 10 rows\n        if (rows > (level + 1) * 10) {\n            setLevel(prev => prev + 1);\n            setDropTime(1000 / (level + 1) + 200);\n        }\n\n        // Check how far we can move without colliding\n        let canMoveTo = 0;\n\n        for (let tryToMoveTo = 1; tryToMoveTo <= y; tryToMoveTo += 1) {\n            if (checkCollision(player, stage, { x: 0, y: tryToMoveTo })) {\n                break;\n            } else {\n                canMoveTo = tryToMoveTo;\n            }\n        }\n\n        // debug collision detection\n        //console.log(`want to move to: ${y}, canMove to ${canMoveTo}, player Y: ${player.pos.y}`);\n\n        if (canMoveTo === y) {\n            updatePlayerPosition({ x: 0, y: y, collided: false });\n        } else {\n            if (player.pos.y < 1 && canMoveTo < 1) {\n                setGameStarted(false);\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPosition({ x: 0, y: canMoveTo, collided: true });\n        }\n    };\n\n    const keyUp = ({ keyCode }: { keyCode: number }) => {\n        if (!gameOver) {\n            if (keyCode === 40 || keyCode === 34 || keyCode === 35) {\n                playerMovement('UNPAUSE');\n            }\n        }\n    };\n\n    const playerMovement = (action: PlayerMovementType) => {\n        switch (action) {\n            case 'LEFT':\n                movePlayer(-1);\n                break;\n            case 'RIGHT':\n                movePlayer(1);\n                break;\n            case 'DOWN':\n                setDropTime(null);\n                moveTetrominoDown(1);\n                break;\n            case 'FULLDOWN':\n                setDropTime(null);\n                moveTetrominoDown(tetrisConfig.stage.height);\n                break;\n            case 'ROTATE':\n                playerRotate(stage, 1);\n                break;\n            case 'TOGGLE_PAUSE':\n                if (gamePaused) {\n                    setGamePaused(false);\n                    setDropTime(1000 / (level + 1));\n                } else {\n                    setGamePaused(true);\n                    setDropTime(null);\n                }\n                break;\n            case 'UNPAUSE':\n                setGamePaused(false);\n                setDropTime(1000 / (level + 1));\n                break;\n        }\n    };\n\n    const move = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        let preventDefault = true;\n\n        if (!gameOver) {\n            switch (event.keyCode) {\n                case 37: // LEFT\n                    playerMovement('LEFT');\n                    break;\n                case 39: // RIGHT\n                    playerMovement('RIGHT');\n                    break;\n                case 40: // DOWN\n                    playerMovement('DOWN');\n                    break;\n                case 38: // UP\n                    playerMovement('ROTATE');\n                    break;\n                case 80: // P\n                    playerMovement('TOGGLE_PAUSE');\n                    break;\n                case 34: // Page Down\n                case 35: // End\n                    playerMovement('FULLDOWN');\n                    break;\n                default:\n                    console.log(`Unused keystroke: ${event.keyCode}`);\n                    preventDefault = false;\n                    break;\n            }\n        }\n\n        if (preventDefault) {\n            event.preventDefault();\n        }\n    };\n\n    useInterval(() => {\n        moveTetrominoDown(1);\n    }, dropTime);\n\n    useEffect(() => {\n        const localStorageSettings = localStorage.getItem('TetrisSettings');\n\n        if (localStorageSettings) {\n            setLocalSettings(JSON.parse(localStorageSettings));\n        }\n    }, []);\n\n    return (\n        <ThemeProvider theme={localSettings.theme === 'light' ? lightTheme : darkTheme}>\n            <AppContainer>\n                {showSettings && (\n                    <Settings\n                        localSettings={localSettings}\n                        onLocalSettingsChange={settingsObject => {\n                            setLocalSettings(settingsObject);\n                            localStorage.setItem('TetrisSettings', JSON.stringify(settingsObject));\n                        }}\n                        onCloseSettings={() => {\n                            setShowSettings(false);\n                        }}\n                    />\n                )}\n                {gameOver && (\n                    <GameOver>\n                        <p>Game Over</p>\n                        <Button\n                            onClick={() => {\n                                startGame();\n                                gameRef?.current?.focus();\n                            }}\n                        >\n                            Restart Game\n                        </Button>\n                    </GameOver>\n                )}\n                <OnScreenControls\n                    onPushLeft={() => {\n                        playerMovement('LEFT');\n                    }}\n                    onPushRotate={() => {\n                        playerMovement('ROTATE');\n                    }}\n                    onPushRight={() => {\n                        playerMovement('RIGHT');\n                    }}\n                    onPushDown={() => {\n                        playerMovement('DOWN');\n                        playerMovement('UNPAUSE');\n                    }}\n                />\n                <StyledTetrisContainer\n                    ref={gameRef}\n                    tilt={localSettings.tilt}\n                    gameOver={gameOver}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyUp={keyUp}\n                    onKeyDown={event => {\n                        move(event);\n                    }}\n                >\n                    <StyledDisplaysContainer>\n                        <Box>\n                            {!gameStarted ? (\n                                <Button\n                                    onClick={() => {\n                                        startGame();\n                                    }}\n                                >\n                                    Start\n                                </Button>\n                            ) : (\n                                <Button\n                                    onClick={() => {\n                                        playerMovement('TOGGLE_PAUSE');\n                                    }}\n                                >\n                                    {gamePaused ? 'Continue' : 'Pause'}\n                                </Button>\n                            )}\n                            <Button\n                                onClick={() => {\n                                    if (!gamePaused) {\n                                        playerMovement('TOGGLE_PAUSE');\n                                    }\n                                    setShowSettings(true);\n                                }}\n                                style={{ marginLeft: '10px' }}\n                            >\n                                <Slider style={{ height: '30px' }} />\n                            </Button>\n                        </Box>\n                        <StyledDisplays>\n                            <Display>Score: {score}</Display>\n                            <Display>Rows: {rows}</Display>\n                            <Display>Level: {level}</Display>\n                            <Display>\n                                <Box>Next:</Box>\n                                <SingleTetromino shape={gamePaused ? pauseTetrominoShape : nextTetromino.preview} />\n                            </Display>\n                        </StyledDisplays>\n                    </StyledDisplaysContainer>\n                    <Stage\n                        paused={gamePaused}\n                        stage={stage}\n                        showInstructions={!gameStarted}\n                        activeColumns={activeColumns}\n                    />\n                </StyledTetrisContainer>\n            </AppContainer>\n        </ThemeProvider>\n    );\n};\n\nexport default Tetris;\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = (rowsCleared: number) => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        if (rowsCleared > 0) {\n            // This is how original Tetris score is calculated\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setRows, level, setLevel] as const;\n};\n","import ReactDOM from 'react-dom';\nimport Tetris from './Components/Tetris';\n\nReactDOM.render(<Tetris />, document.getElementById('tetris'));\n"],"sourceRoot":""}